Index: src/main/java/main/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main;\r\nimport javax.swing.*;\r\n\r\nimport oop.entity.*;\r\nimport org.json.simple.*;\r\n\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\n\r\npublic class Main {\r\n    int currentRoom = 16;\r\n    int previousRoom;\r\n    JSONArray rooms;\r\n    boolean debug;\r\n    Entity player = new Warrior();\r\n    final int monsterTypes = 4; // Replace if you add more monsters\r\n    public Main(JSONArray a){\r\n        new Window();\r\n        rooms = a;\r\n        newRoom();\r\n    }\r\n    private void newRoom() {\r\n        JSONObject room = (JSONObject) rooms.get(currentRoom);\r\n        if (room.containsKey(\"monsters\")) {\r\n            occupiedRoom(room);\r\n        } else {\r\n            emptyRoom(room);\r\n        }\r\n    }\r\n    private void occupiedRoom(JSONObject room) {\r\n        ArrayList<String> monsterList = (ArrayList<String>) room.get(\"monsters\");\r\n        Entity[] monsters = new Entity[monsterList.size()];\r\n        for (int i = 0; i < monsterList.size(); i++) {\r\n            switch (monsterList.get(i)) {\r\n                case \"Giant Rat\":\r\n                    monsters[i] = new GiantRat();\r\n                    break;\r\n                case \"Goblin\":\r\n                    monsters[i] = new Goblin();\r\n                    break;\r\n                case \"Hobgoblin\":\r\n                    monsters[i] = new Hobgoblin();\r\n                    break;\r\n                case \"Wolf\":\r\n                    monsters[i] = new Wolf();\r\n                    break;\r\n            }\r\n        }\r\n        String text;\r\n        if (monsterList.size() == 1) {\r\n            text = \"There is 1 \" + monsterList.get(0) + \" in this room.\";\r\n        } else {\r\n            int[] monsterCount = new int[monsterTypes];\r\n            for (int i = 0; i < monsterTypes; i++) {\r\n                if (i == monsterList.size()) {break;}\r\n                monsterCount[i]++;\r\n                for (int j = i + 1; j < monsterList.size(); j++) {\r\n                    if (monsterList.get(i).equals(monsterList.get(j))) {\r\n                        monsterCount[i]++;\r\n                        monsterList.remove(j);\r\n                        j--;\r\n                    }\r\n                }\r\n            }\r\n            text = \"There \" + ((monsterCount[0] == 1) ? \"is \" : \"are \");\r\n            for (int i = 0; i < monsterList.size(); i++) {\r\n                String s = monsterCount[i] + \" \" + monsterList.get(i) + ((monsterCount[i] == 1) ? \" \" : \"s \");\r\n                text = text.concat(s);\r\n                System.out.println(text);\r\n\r\n                if (monsterCount[i+1] == 0) {\r\n                    text = text.concat(\"in this room.\");\r\n                } else {\r\n                    if (monsterList.size() > 2) {\r\n                        text = text.concat(\", \");\r\n                    }\r\n                    if (monsterCount[i+2] == 0) {\r\n                        text = text.concat(\"and \");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        JButton retreat = new JButton(\"Retreat\");\r\n        retreat.addActionListener(l -> {\r\n            currentRoom = previousRoom;\r\n            newRoom();\r\n        });\r\n        JButton fight = new JButton(\"Fight\");\r\n        fight.addActionListener(l -> {\r\n            battle(room, monsters);\r\n\r\n        });\r\n        Window.infoPopup(text, new JButton[]{retreat, fight});\r\n    }\r\n    public void battle(JSONObject room, Entity[] monsters) {\r\n        for (Entity m: monsters) {\r\n            new Attack(player, monsters, Math.max((int) ((long) room.get(\"width\")), (int) ((long) room.get(\"height\"))));\r\n        }\r\n    }\r\n    private void emptyRoom(JSONObject room) {\r\n        Window.window.getContentPane().removeAll();\r\n        boolean explored = (boolean) room.put(\"explored\", true);\r\n\r\n        Window.window.setTitle((room.containsKey(\"title\"))\r\n                ? (String) room.get(\"title\")\r\n                : ((debug || explored)\r\n                ? Integer.toString(currentRoom)\r\n                : \"\"));\r\n\r\n        int width = ((Long) room.get(\"width\")).intValue();\r\n        int height = ((Long) room.get(\"height\")).intValue();\r\n\r\n        JButton[][] tile = new JButton[width][height];\r\n        for (int i = 0; i < height; i++) {\r\n            for (int j = 0; j < width; j++) {\r\n                tile[j][i] = new JButton();\r\n                Window.window.add(tile[j][i]);\r\n            }\r\n        }\r\n        JSONArray exits = (JSONArray) room.get(\"exits\");\r\n        for (Object o : exits) {\r\n            JSONObject j = (JSONObject) o;\r\n            int x = ((Long) j.get(\"x\")).intValue();\r\n            int y = ((Long) j.get(\"y\")).intValue();\r\n            tile[x][y].setText((debug || (boolean) ((JSONObject) rooms.get(((Long) j.get(\"to\")).intValue())).get(\"explored\"))\r\n                    ? Long.toString((Long) j.get(\"to\"))\r\n                    : (String) j.get(\"label\"));\r\n            tile[x][y].addActionListener(l -> {\r\n                previousRoom = currentRoom;\r\n                currentRoom = ((Long) j.get(\"to\")).intValue();\r\n                newRoom();\r\n            });\r\n        }\r\n        if (currentRoom == 0) {\r\n            tile[0][0].setText(\"Debug\");\r\n            tile[0][0].addActionListener(l -> {\r\n                debug = !debug;\r\n                newRoom();\r\n            });\r\n        }\r\n\r\n        Window.window.setLayout(new GridLayout(height,width));\r\n        Window.window.setSize(width*100, height*100);\r\n        Window.window.revalidate();\r\n        Window.window.repaint();\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/main/Main.java b/src/main/java/main/Main.java
--- a/src/main/java/main/Main.java	(revision daf12fe9eddd8ad70eb9736deab62cb1eab7d1a1)
+++ b/src/main/java/main/Main.java	(date 1715720267046)
@@ -80,17 +80,17 @@
                 }
             }
         }
-        JButton retreat = new JButton("Retreat");
-        retreat.addActionListener(l -> {
+        ArrayList<JButton> options = new ArrayList<JButton>();
+        options.add(new JButton("Retreat"));
+        options.get(0).addActionListener(l -> {
             currentRoom = previousRoom;
             newRoom();
         });
-        JButton fight = new JButton("Fight");
-        fight.addActionListener(l -> {
-            battle(room, monsters);
-
+        options.add(new JButton("Fight"));
+        options.get(1).addActionListener(l -> {
+            new Attack(player,monsters,(int) Math.max((long) room.get("width"),(long) room.get("height")));
         });
-        Window.infoPopup(text, new JButton[]{retreat, fight});
+        Window.infoPopup(text, options);
     }
     public void battle(JSONObject room, Entity[] monsters) {
         for (Entity m: monsters) {
Index: src/main/java/main/Window.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\n\r\npublic class Window {\r\n    public static JFrame window;\r\n\r\n    public Window() {\r\n        window = new JFrame();\r\n        window.setVisible(true);\r\n        window.toFront();\r\n        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n    }\r\n    public static void infoPopup(String labelText, JButton[] button){\r\n        window.getContentPane().removeAll();\r\n        window.add(new JLabel(labelText,SwingConstants.CENTER));\r\n\r\n        JPanel buttons = new JPanel();\r\n        window.add(buttons);\r\n        buttons.setLayout(new GridLayout());\r\n        for (JButton b:button) {\r\n            buttons.add(b);\r\n        }\r\n\r\n\r\n        window.setLayout(new GridLayout(2,1));\r\n        window.setSize((int) window.getPreferredSize().getWidth() + 10, 200);\r\n        window.revalidate();\r\n        window.repaint();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/main/Window.java b/src/main/java/main/Window.java
--- a/src/main/java/main/Window.java	(revision daf12fe9eddd8ad70eb9736deab62cb1eab7d1a1)
+++ b/src/main/java/main/Window.java	(date 1715719560612)
@@ -1,7 +1,12 @@
 package main;
 
-import javax.swing.*;
-import java.awt.*;
+import javax.swing.JButton;
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+import javax.swing.SwingConstants;
+import java.awt.GridLayout;
+import java.util.ArrayList;
 
 public class Window {
     public static JFrame window;
@@ -12,19 +17,19 @@
         window.toFront();
         window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
     }
-    public static void infoPopup(String labelText, JButton[] button){
+    public static void infoPopup(String labelText, ArrayList<JButton> button) {
         window.getContentPane().removeAll();
-        window.add(new JLabel(labelText,SwingConstants.CENTER));
+        window.add(new JLabel(labelText, SwingConstants.CENTER));
 
         JPanel buttons = new JPanel();
         window.add(buttons);
         buttons.setLayout(new GridLayout());
-        for (JButton b:button) {
+        for (JButton b : button) {
             buttons.add(b);
         }
 
 
-        window.setLayout(new GridLayout(2,1));
+        window.setLayout(new GridLayout(2, 1));
         window.setSize((int) window.getPreferredSize().getWidth() + 10, 200);
         window.revalidate();
         window.repaint();
Index: src/main/java/main/Attack.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main;\r\n\r\nimport oop.entity.Entity;\r\nimport oop.weapon.Weapon;\r\n\r\nimport javax.swing.*;\r\n\r\npublic class Attack {\r\n    Entity player;\r\n    Entity[] monsters;\r\n    int roomRadius;\r\n    int entity;\r\n    int step;\r\n    JButton[] options;\r\n    public Attack(Entity p, Entity[] m, int r) {\r\n        player = p;\r\n        monsters = m;\r\n        roomRadius = r;\r\n        entity = m.length;\r\n        battle();\r\n    }\r\n\r\n    public void battle() {\r\n        step = 0;\r\n        if (entity == monsters.length) {\r\n            entity = 0;\r\n            battle();\r\n            manualAttack(0);\r\n        } else {\r\n            if (entity == 0) {\r\n                options = new JButton[1];\r\n                options[0] = new JButton(\"OK\");\r\n            }\r\n            options[0].addActionListener(l -> {\r\n                step++;\r\n                automaticAttack();\r\n            });\r\n\r\n            automaticAttack();\r\n        }\r\n    }\r\n    public void manualAttack(int o) {\r\n        switch (step) {\r\n            case 0:\r\n                options = new JButton[2*player.speed/5+1];\r\n                for (int i = 0; i < options.length; i++) {\r\n                    int f = 5*(i - options.length/2); // must be final or semi-final\r\n                    options[i] = new JButton();\r\n                    options[i].setText(Math.abs(f) + \"ft\");\r\n                    options[i].setActionCommand(Integer.toString(i));\r\n                    options[i].addActionListener(l -> {\r\n                        step++;\r\n                        manualAttack(f);\r\n                    });\r\n                    for (int j = 0; j < monsters.length; j++) {\r\n                        if (player.pos + f == monsters[j].pos) {\r\n                            options[i].setText(monsters[j].name + \" (\" + monsters[j].hp + \"/\" + monsters[j].maxHP + \")\");\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            case 1:\r\n                options = new JButton[monsters.length];\r\n                for (int i = 0; i < options.length; i++) {\r\n                    options[i] = new JButton();\r\n                    options[i].setText(monsters[i].name);\r\n                    options[i].setActionCommand(Integer.toString(i));\r\n                    int f = i; // must be final or semi-final\r\n                    options[i].addActionListener(l -> {\r\n                        step++;\r\n                        manualAttack(f);\r\n                    });\r\n                }\r\n                Window.infoPopup(\"Which enemy will you attack?\", options);\r\n                break;\r\n            case 2:\r\n                battle();\r\n                break;\r\n        }\r\n\r\n    }\r\n    public void automaticAttack() {\r\n        Entity enemy = monsters[entity];\r\n        switch (step) {\r\n            case 0:\r\n                /*  Explanation:\r\n                    The enemies are programmed to advance towards their target, and retreat when under half health.\r\n                    The other parts of the code is about if they are close to a wall or their target, in which case they should be stopped.\r\n                */\r\n                int right = (enemy.pos > player.pos) ? 1 : -1;\r\n                if (enemy.maxHP / enemy.hp < 2) {\r\n                    int movementTarget = player.pos + 5 * right;\r\n                    if (Math.abs(enemy.pos - movementTarget) > enemy.speed) {\r\n                        enemy.pos -= enemy.speed * right;\r\n                        Window.infoPopup(\"The enemy moved towards you (\" + Math.abs(player.pos - enemy.pos) + \"ft)\", options);\r\n                    } else {\r\n                        enemy.pos = player.pos + 5 * right;\r\n                        Window.infoPopup(\"The enemy moved next to you (5ft)\", options);\r\n                    }\r\n                } else {\r\n                    int movementTarget = roomRadius * right;\r\n                    if (Math.abs(enemy.pos - movementTarget) > enemy.speed) {\r\n                        enemy.pos += enemy.speed * right;\r\n                        Window.infoPopup(\"The enemy moved away from you (\" + Math.abs(player.pos - enemy.pos) + \"ft)\", options);\r\n                    } else {\r\n                        enemy.pos = player.pos + 5 * right;\r\n                        Window.infoPopup(\"The enemy moved against the wall (\" + Math.abs(player.pos - enemy.pos) + \"ft)\", options);\r\n                    }\r\n                }\r\n                break;\r\n            case 1:\r\n                Window.infoPopup(\"The enemy was too far away to attack\", options); // This gets wiped if a weapon is found\r\n                for (Weapon w : enemy.weapons) {\r\n                    if (w.canAttack(enemy.pos - player.pos)) {\r\n                        int damage = w.attack(player.ac);\r\n                        Window.infoPopup(\"The enemy attacked with their \" + w.name + \" and \" + ((damage == 0) ? \"missed\" : \"dealt \" + damage + \" damage\"), options);\r\n                        player.hp -= damage;\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            case 2:\r\n                if (player.hp > 0) {\r\n                    options[0].addActionListener(l -> {\r\n                        entity++;\r\n                        battle();\r\n                    });\r\n                    Window.infoPopup(\"You are now at \" + player.hp + \" health\", options);\r\n                } else {\r\n                    options[0].addActionListener(l -> {\r\n                        System.exit(0);\r\n                    });\r\n                    Window.infoPopup(\"You have passed out\", options);\r\n\r\n                }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/main/Attack.java b/src/main/java/main/Attack.java
--- a/src/main/java/main/Attack.java	(revision daf12fe9eddd8ad70eb9736deab62cb1eab7d1a1)
+++ b/src/main/java/main/Attack.java	(date 1715721396234)
@@ -2,6 +2,9 @@
 
 import oop.entity.Entity;
 import oop.weapon.Weapon;
+import org.json.simple.JSONObject;
+
+import java.util.ArrayList;
 
 import javax.swing.*;
 
@@ -11,27 +14,23 @@
     int roomRadius;
     int entity;
     int step;
-    JButton[] options;
+    ArrayList<JButton> options;
     public Attack(Entity p, Entity[] m, int r) {
         player = p;
         monsters = m;
         roomRadius = r;
-        entity = m.length;
+        entity = monsters.length;
+        System.out.println(monsters.length);
         battle();
     }
 
     public void battle() {
         step = 0;
         if (entity == monsters.length) {
-            entity = 0;
-            battle();
+            System.out.println("gre9uaa9igu");
             manualAttack(0);
         } else {
-            if (entity == 0) {
-                options = new JButton[1];
-                options[0] = new JButton("OK");
-            }
-            options[0].addActionListener(l -> {
+            options.get(0).addActionListener(l -> {
                 step++;
                 automaticAttack();
             });
@@ -42,39 +41,46 @@
     public void manualAttack(int o) {
         switch (step) {
             case 0:
-                options = new JButton[2*player.speed/5+1];
-                for (int i = 0; i < options.length; i++) {
-                    int f = 5*(i - options.length/2); // must be final or semi-final
-                    options[i] = new JButton();
-                    options[i].setText(Math.abs(f) + "ft");
-                    options[i].setActionCommand(Integer.toString(i));
-                    options[i].addActionListener(l -> {
+                options = new ArrayList<JButton>();
+                int h = 0;
+                for (int p = -player.speed; p <= player.speed; p+=5) {
+                    if (Math.abs(player.pos+h) > roomRadius) {continue;}
+                    int f = p; // must be final or semi-final
+                    options.add(new JButton(Math.abs(f) + "ft"));
+                    options.get(h).addActionListener(l -> {
                         step++;
                         manualAttack(f);
+                        System.out.println();
                     });
                     for (int j = 0; j < monsters.length; j++) {
                         if (player.pos + f == monsters[j].pos) {
-                            options[i].setText(monsters[j].name + " (" + monsters[j].hp + "/" + monsters[j].maxHP + ")");
+                            options.set(h, new JButton("monsters[j].name (" + monsters[j].hp + "/" + monsters[j].maxHP + ")"));
                             break;
                         }
                     }
+                    h++;
                 }
+                Window.infoPopup("Where will you move?", options);
             case 1:
-                options = new JButton[monsters.length];
-                for (int i = 0; i < options.length; i++) {
-                    options[i] = new JButton();
-                    options[i].setText(monsters[i].name);
-                    options[i].setActionCommand(Integer.toString(i));
+                options = new ArrayList<JButton>();
+                for (int i = 0; i < monsters.length; i++) {
+                    options.add(new JButton(monsters[i].name + " (" + monsters[i].hp + "/" + monsters[i].maxHP + ")"));
                     int f = i; // must be final or semi-final
-                    options[i].addActionListener(l -> {
+                    options.get(i).addActionListener(l -> {
                         step++;
                         manualAttack(f);
                     });
                 }
-                Window.infoPopup("Which enemy will you attack?", options);
+                Window.infoPopup("Who will you attack?", options);
                 break;
             case 2:
-                battle();
+                options = new ArrayList<JButton>();
+                options.add(new JButton("OK"));
+                options.get(0).addActionListener(l -> {
+                    entity = 0;
+                    battle();
+                });
+                Window.infoPopup("ok", options);
                 break;
         }
 
@@ -121,13 +127,13 @@
                 break;
             case 2:
                 if (player.hp > 0) {
-                    options[0].addActionListener(l -> {
+                    options.get(0).addActionListener(l -> {
                         entity++;
                         battle();
                     });
                     Window.infoPopup("You are now at " + player.hp + " health", options);
                 } else {
-                    options[0].addActionListener(l -> {
+                    options.get(0).addActionListener(l -> {
                         System.exit(0);
                     });
                     Window.infoPopup("You have passed out", options);
